// <auto-generated/>
#pragma warning disable
using BankAccount.Api;
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: BankAccountProjectionLiveAggregation1020082603
    public class BankAccountProjectionLiveAggregation1020082603 : Marten.Events.Aggregation.SyncLiveAggregatorBase<BankAccount.Api.BankAccount>
    {
        private readonly BankAccount.Api.BankAccountProjection _bankAccountProjection;

        public BankAccountProjectionLiveAggregation1020082603(BankAccount.Api.BankAccountProjection bankAccountProjection)
        {
            _bankAccountProjection = bankAccountProjection;
        }


        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.AccountCreatedEvent, BankAccount.Api.BankAccount> ProjectEvent1 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.MoneyDepositedEvent, BankAccount.Api.BankAccount> ProjectEvent2 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.MoneyWithdrawnEvent, BankAccount.Api.BankAccount> ProjectEvent3 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.TransferSentEvent, BankAccount.Api.BankAccount> ProjectEvent4 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.TransferReceivedEvent, BankAccount.Api.BankAccount> ProjectEvent5 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.InterestCreditedEvent, BankAccount.Api.BankAccount> ProjectEvent6 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.FeeChargedEvent, BankAccount.Api.BankAccount> ProjectEvent7 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.LimitUpdatedEvent, BankAccount.Api.BankAccount> ProjectEvent8 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.AccountClosedEvent, BankAccount.Api.BankAccount> ProjectEvent9 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.PeriodClosedEvent, BankAccount.Api.BankAccount> ProjectEvent10 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.PeriodStartedEvent, BankAccount.Api.BankAccount> ProjectEvent11 {get; set;}


        public override BankAccount.Api.BankAccount Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, BankAccount.Api.BankAccount snapshot)
        {
            if (!events.Any()) return snapshot;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
                if (snapshot != null) snapshot = _bankAccountProjection.ApplyMetadata(snapshot, events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
                if (snapshot != null) snapshot = _bankAccountProjection.ApplyMetadata(snapshot, @event);
            }

            return snapshot;
        }


        public BankAccount.Api.BankAccount Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return null;
        }


        public BankAccount.Api.BankAccount Apply(Marten.Events.IEvent @event, BankAccount.Api.BankAccount aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<BankAccount.Api.AccountClosedEvent> event_AccountClosedEvent9:
                    aggregate = ProjectEvent9.Invoke(aggregate, event_AccountClosedEvent9.Data);
                    break;
                case Marten.Events.IEvent<BankAccount.Api.AccountCreatedEvent> event_AccountCreatedEvent1:
                    aggregate = ProjectEvent1.Invoke(aggregate, event_AccountCreatedEvent1.Data);
                    break;
                case Marten.Events.IEvent<BankAccount.Api.FeeChargedEvent> event_FeeChargedEvent7:
                    aggregate = ProjectEvent7.Invoke(aggregate, event_FeeChargedEvent7.Data);
                    break;
                case Marten.Events.IEvent<BankAccount.Api.InterestCreditedEvent> event_InterestCreditedEvent6:
                    aggregate = ProjectEvent6.Invoke(aggregate, event_InterestCreditedEvent6.Data);
                    break;
                case Marten.Events.IEvent<BankAccount.Api.LimitUpdatedEvent> event_LimitUpdatedEvent8:
                    aggregate = ProjectEvent8.Invoke(aggregate, event_LimitUpdatedEvent8.Data);
                    break;
                case Marten.Events.IEvent<BankAccount.Api.MoneyDepositedEvent> event_MoneyDepositedEvent2:
                    aggregate = ProjectEvent2.Invoke(aggregate, event_MoneyDepositedEvent2.Data);
                    break;
                case Marten.Events.IEvent<BankAccount.Api.MoneyWithdrawnEvent> event_MoneyWithdrawnEvent3:
                    aggregate = ProjectEvent3.Invoke(aggregate, event_MoneyWithdrawnEvent3.Data);
                    break;
                case Marten.Events.IEvent<BankAccount.Api.PeriodClosedEvent> event_PeriodClosedEvent10:
                    aggregate = ProjectEvent10.Invoke(aggregate, event_PeriodClosedEvent10.Data);
                    break;
                case Marten.Events.IEvent<BankAccount.Api.PeriodStartedEvent> event_PeriodStartedEvent11:
                    aggregate = ProjectEvent11.Invoke(aggregate, event_PeriodStartedEvent11.Data);
                    break;
                case Marten.Events.IEvent<BankAccount.Api.TransferReceivedEvent> event_TransferReceivedEvent5:
                    aggregate = ProjectEvent5.Invoke(aggregate, event_TransferReceivedEvent5.Data);
                    break;
                case Marten.Events.IEvent<BankAccount.Api.TransferSentEvent> event_TransferSentEvent4:
                    aggregate = ProjectEvent4.Invoke(aggregate, event_TransferSentEvent4.Data);
                    break;
            }

            return aggregate;
        }

    }

    // END: BankAccountProjectionLiveAggregation1020082603
    
    
    // START: BankAccountProjectionInlineHandler1020082603
    public class BankAccountProjectionInlineHandler1020082603 : Marten.Events.Aggregation.AggregationRuntime<BankAccount.Api.BankAccount, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<BankAccount.Api.BankAccount, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<BankAccount.Api.BankAccount, System.Guid> _storage;
        private readonly BankAccount.Api.BankAccountProjection _bankAccountProjection;

        public BankAccountProjectionInlineHandler1020082603(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<BankAccount.Api.BankAccount, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<BankAccount.Api.BankAccount, System.Guid> storage, BankAccount.Api.BankAccountProjection bankAccountProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _bankAccountProjection = bankAccountProjection;
        }


        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.AccountCreatedEvent, BankAccount.Api.BankAccount> ProjectEvent1 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.MoneyDepositedEvent, BankAccount.Api.BankAccount> ProjectEvent2 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.MoneyWithdrawnEvent, BankAccount.Api.BankAccount> ProjectEvent3 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.TransferSentEvent, BankAccount.Api.BankAccount> ProjectEvent4 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.TransferReceivedEvent, BankAccount.Api.BankAccount> ProjectEvent5 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.InterestCreditedEvent, BankAccount.Api.BankAccount> ProjectEvent6 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.FeeChargedEvent, BankAccount.Api.BankAccount> ProjectEvent7 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.LimitUpdatedEvent, BankAccount.Api.BankAccount> ProjectEvent8 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.AccountClosedEvent, BankAccount.Api.BankAccount> ProjectEvent9 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.PeriodClosedEvent, BankAccount.Api.BankAccount> ProjectEvent10 {get; set;}

        public System.Func<BankAccount.Api.BankAccount, BankAccount.Api.PeriodStartedEvent, BankAccount.Api.BankAccount> ProjectEvent11 {get; set;}


        public override async System.Threading.Tasks.ValueTask<BankAccount.Api.BankAccount> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<BankAccount.Api.BankAccount, System.Guid> slice, Marten.Events.IEvent evt, BankAccount.Api.BankAccount aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<BankAccount.Api.AccountClosedEvent> event_AccountClosedEvent20:
                    aggregate ??= CreateDefault(evt);
                    aggregate = ProjectEvent9.Invoke(aggregate, event_AccountClosedEvent20.Data);
                    return aggregate;
                case Marten.Events.IEvent<BankAccount.Api.AccountCreatedEvent> event_AccountCreatedEvent12:
                    aggregate ??= CreateDefault(evt);
                    aggregate = ProjectEvent1.Invoke(aggregate, event_AccountCreatedEvent12.Data);
                    return aggregate;
                case Marten.Events.IEvent<BankAccount.Api.FeeChargedEvent> event_FeeChargedEvent18:
                    aggregate ??= CreateDefault(evt);
                    aggregate = ProjectEvent7.Invoke(aggregate, event_FeeChargedEvent18.Data);
                    return aggregate;
                case Marten.Events.IEvent<BankAccount.Api.InterestCreditedEvent> event_InterestCreditedEvent17:
                    aggregate ??= CreateDefault(evt);
                    aggregate = ProjectEvent6.Invoke(aggregate, event_InterestCreditedEvent17.Data);
                    return aggregate;
                case Marten.Events.IEvent<BankAccount.Api.LimitUpdatedEvent> event_LimitUpdatedEvent19:
                    aggregate ??= CreateDefault(evt);
                    aggregate = ProjectEvent8.Invoke(aggregate, event_LimitUpdatedEvent19.Data);
                    return aggregate;
                case Marten.Events.IEvent<BankAccount.Api.MoneyDepositedEvent> event_MoneyDepositedEvent13:
                    aggregate ??= CreateDefault(evt);
                    aggregate = ProjectEvent2.Invoke(aggregate, event_MoneyDepositedEvent13.Data);
                    return aggregate;
                case Marten.Events.IEvent<BankAccount.Api.MoneyWithdrawnEvent> event_MoneyWithdrawnEvent14:
                    aggregate ??= CreateDefault(evt);
                    aggregate = ProjectEvent3.Invoke(aggregate, event_MoneyWithdrawnEvent14.Data);
                    return aggregate;
                case Marten.Events.IEvent<BankAccount.Api.PeriodClosedEvent> event_PeriodClosedEvent21:
                    aggregate ??= CreateDefault(evt);
                    aggregate = ProjectEvent10.Invoke(aggregate, event_PeriodClosedEvent21.Data);
                    return aggregate;
                case Marten.Events.IEvent<BankAccount.Api.PeriodStartedEvent> event_PeriodStartedEvent22:
                    aggregate ??= CreateDefault(evt);
                    aggregate = ProjectEvent11.Invoke(aggregate, event_PeriodStartedEvent22.Data);
                    return aggregate;
                case Marten.Events.IEvent<BankAccount.Api.TransferReceivedEvent> event_TransferReceivedEvent16:
                    aggregate ??= CreateDefault(evt);
                    aggregate = ProjectEvent5.Invoke(aggregate, event_TransferReceivedEvent16.Data);
                    return aggregate;
                case Marten.Events.IEvent<BankAccount.Api.TransferSentEvent> event_TransferSentEvent15:
                    aggregate ??= CreateDefault(evt);
                    aggregate = ProjectEvent4.Invoke(aggregate, event_TransferSentEvent15.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public BankAccount.Api.BankAccount Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return null;
        }

    }

    // END: BankAccountProjectionInlineHandler1020082603
    
    
}

